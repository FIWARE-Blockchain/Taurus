{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Taurus Taurus is a blockchain listener that supports various DLT, and the listener aims to listen to Blockchain Events and store data in FIWARE. This component compliments FIWARE as an OffChainDB. Architecture TAURUS IN POWERED BY FIWARE ARCHITECTURE Flow Diagram The way Taurus work's in 'Powered By FIWARE' architecture as follows: A post request \"/config\" from the user consists of the contract Address and attributes to listen to when a new transaction was added in a DLT. Taurus creates a new listener in the background to listen to the DLT according configuration requested. When a new transaction is added with the same contract Address previously registered, a listener captures this information and sends it to FIWARE context Broker. SUPPORTED DLT CLIENTS [x] Ethereum [ ] IOTA [ ] FABRIC Chaincode DEPENDENCIES: This project uses: python3 and pip3","title":"Home"},{"location":"index.html#taurus","text":"Taurus is a blockchain listener that supports various DLT, and the listener aims to listen to Blockchain Events and store data in FIWARE. This component compliments FIWARE as an OffChainDB.","title":"Taurus"},{"location":"index.html#architecture","text":"TAURUS IN POWERED BY FIWARE ARCHITECTURE","title":"Architecture"},{"location":"index.html#flow-diagram","text":"The way Taurus work's in 'Powered By FIWARE' architecture as follows: A post request \"/config\" from the user consists of the contract Address and attributes to listen to when a new transaction was added in a DLT. Taurus creates a new listener in the background to listen to the DLT according configuration requested. When a new transaction is added with the same contract Address previously registered, a listener captures this information and sends it to FIWARE context Broker. SUPPORTED DLT CLIENTS [x] Ethereum [ ] IOTA [ ] FABRIC Chaincode DEPENDENCIES: This project uses: python3 and pip3","title":"Flow Diagram"},{"location":"apis.html","text":"API DESCRIPTION META Get the status ```sh curl --location --request GET 'http://localhost:8000/version' ``` Response json { \"name\": \"taurus\", \"version\": \"0.0.1\" } CONFIG Get All the configs ```sh curl --location --request GET 'http://localhost:8000/config' ``` Get the config by ID ```sh curl --location --request GET 'http://localhost:8000/config/16' ``` Delete a config by ID ```sh curl --location --request DELETE 'http://localhost:8000/config/17' ``` Create a config ```sh curl --location --request POST 'http://localhost:8000/config' \\ --header 'Content-Type: application/json' \\ --data-raw \u2018 \"id\":\"event-identifier\", \"interval\":10, \"contractAddress\":\"0x1349f3e1b8d71effb47b840594ff27da7e603d17\", \"abi\":[ { \"inputs\":[ { \"name\":\"_x\", \"type\":\"uint256\" } ], \"anonymous\":false, \"name\":\"LogEvent\", \"type\":\"event\" }, { \"inputs\":[ { \"indexed\":true, \"name\":\"_sender\", \"type\":\"address\" } ], \"anonymous\":false, \"name\":\"LogOtherEvent\", \"type\":\"event\" } ] }\u2019 \"id\":\"event-identifier\", \"interval\":10, \"contractAddress\":\"0x1349f3e1b8d71effb47b840594ff27da7e603d17\", \"abi\":[ { \"inputs\":[ { \"name\":\"_x\", \"type\":\"uint256\" } ], \"anonymous\":false, \"name\":\"LogEvent\", \"type\":\"event\" }, { \"inputs\":[ { \"indexed\":true, \"name\":\"_sender\", \"type\":\"address\" } ], \"anonymous\":false, \"name\":\"LogOtherEvent\", \"type\":\"event\" } ] } ``` **Response** ```json { \"id\": 8, \"contractAddress\": \"0x1349f3e1b8d71effb47b840594ff27da7e603d17\", \"abi\": [ { \"inputs\": [ { \"name\": \"_x\", \"type\": \"uint256\" } ], \"anonymous\": false, \"name\": \"LogEvent\", \"type\": \"event\" }, { \"inputs\": [ { \"indexed\": true, \"name\": \"_sender\", \"type\": \"address\" } ], \"anonymous\": false, \"name\": \"LogOtherEvent\", \"type\": \"event\" } ], \"interval\": 10 } ``` Try out the postman collection here","title":"APIs"},{"location":"apis.html#api-description","text":"","title":"API DESCRIPTION"},{"location":"apis.html#meta","text":"","title":"META"},{"location":"apis.html#get-the-status","text":"```sh curl --location --request GET 'http://localhost:8000/version' ``` Response json { \"name\": \"taurus\", \"version\": \"0.0.1\" }","title":"Get the status"},{"location":"apis.html#config","text":"","title":"CONFIG"},{"location":"apis.html#get-all-the-configs","text":"```sh curl --location --request GET 'http://localhost:8000/config' ```","title":"Get All the configs"},{"location":"apis.html#get-the-config-by-id","text":"```sh curl --location --request GET 'http://localhost:8000/config/16' ```","title":"Get the config by ID"},{"location":"apis.html#delete-a-config-by-id","text":"```sh curl --location --request DELETE 'http://localhost:8000/config/17' ```","title":"Delete a config by ID"},{"location":"apis.html#create-a-config","text":"```sh curl --location --request POST 'http://localhost:8000/config' \\ --header 'Content-Type: application/json' \\ --data-raw \u2018 \"id\":\"event-identifier\", \"interval\":10, \"contractAddress\":\"0x1349f3e1b8d71effb47b840594ff27da7e603d17\", \"abi\":[ { \"inputs\":[ { \"name\":\"_x\", \"type\":\"uint256\" } ], \"anonymous\":false, \"name\":\"LogEvent\", \"type\":\"event\" }, { \"inputs\":[ { \"indexed\":true, \"name\":\"_sender\", \"type\":\"address\" } ], \"anonymous\":false, \"name\":\"LogOtherEvent\", \"type\":\"event\" } ] }\u2019 \"id\":\"event-identifier\", \"interval\":10, \"contractAddress\":\"0x1349f3e1b8d71effb47b840594ff27da7e603d17\", \"abi\":[ { \"inputs\":[ { \"name\":\"_x\", \"type\":\"uint256\" } ], \"anonymous\":false, \"name\":\"LogEvent\", \"type\":\"event\" }, { \"inputs\":[ { \"indexed\":true, \"name\":\"_sender\", \"type\":\"address\" } ], \"anonymous\":false, \"name\":\"LogOtherEvent\", \"type\":\"event\" } ] } ``` **Response** ```json { \"id\": 8, \"contractAddress\": \"0x1349f3e1b8d71effb47b840594ff27da7e603d17\", \"abi\": [ { \"inputs\": [ { \"name\": \"_x\", \"type\": \"uint256\" } ], \"anonymous\": false, \"name\": \"LogEvent\", \"type\": \"event\" }, { \"inputs\": [ { \"indexed\": true, \"name\": \"_sender\", \"type\": \"address\" } ], \"anonymous\": false, \"name\": \"LogOtherEvent\", \"type\": \"event\" } ], \"interval\": 10 } ``` Try out the postman collection here","title":"Create a config"},{"location":"installation.html","text":"INSTALLATION GUIDE This section describes installing Taurus Blockchain Listener in two different ways: 1 -LOCALHOST Requirements In order to execute Taurus, it is needed to have previously installed the following software: Install python3 and pip3: Instructions CLONE PROJECT git clone https://github.com/FIWARE-Blockchain/Taurus CONFIGURE DLT AND ORION URL (IT'S SHOULD ALREADY RUNNING) at apis/config.ini [ETHEREUM] url = http://46.17.108.87 port = 8545 [ORION] url = http://localhost port = 1026 [THREAD] max_workers = 5 INSTALL DEPENDENCIES pip3 install -r requirements.txt RUN python3 manage.py migrate python3 manage.py runserver --noreload RUN TEST Install python3 and pip3 pip3 install -r requirements.txt python3 manage.py test 2 -DOCKER Requirements In order to execute Taurus, it is needed to have previously installed the following software: Install Docker Instructions CLONE PROJECT git clone https://github.com/FIWARE-Blockchain/Taurus CONFIGURE DLT AND ORION URL (IT'S SHOULD ALREADY RUNNING) at apis/config.ini [TAURUS] version = 0.0.1 port = 8080 [ETHEREUM] url = http://46.17.108.87 port = 8545 [ORION] url = http://localhost port = 1026 [THREAD] max_workers = 5 RUN docker build -t taurus . docker run taurus","title":"Installation"},{"location":"installation.html#installation-guide","text":"This section describes installing Taurus Blockchain Listener in two different ways:","title":"INSTALLATION GUIDE"},{"location":"installation.html#1-localhost","text":"","title":"1 -LOCALHOST"},{"location":"installation.html#requirements","text":"In order to execute Taurus, it is needed to have previously installed the following software: Install python3 and pip3:","title":"Requirements"},{"location":"installation.html#instructions","text":"CLONE PROJECT git clone https://github.com/FIWARE-Blockchain/Taurus CONFIGURE DLT AND ORION URL (IT'S SHOULD ALREADY RUNNING) at apis/config.ini [ETHEREUM] url = http://46.17.108.87 port = 8545 [ORION] url = http://localhost port = 1026 [THREAD] max_workers = 5 INSTALL DEPENDENCIES pip3 install -r requirements.txt RUN python3 manage.py migrate python3 manage.py runserver --noreload RUN TEST Install python3 and pip3 pip3 install -r requirements.txt python3 manage.py test","title":"Instructions"},{"location":"installation.html#2-docker","text":"","title":"2 -DOCKER"},{"location":"installation.html#requirements_1","text":"In order to execute Taurus, it is needed to have previously installed the following software: Install Docker","title":"Requirements"},{"location":"installation.html#instructions_1","text":"CLONE PROJECT git clone https://github.com/FIWARE-Blockchain/Taurus CONFIGURE DLT AND ORION URL (IT'S SHOULD ALREADY RUNNING) at apis/config.ini [TAURUS] version = 0.0.1 port = 8080 [ETHEREUM] url = http://46.17.108.87 port = 8545 [ORION] url = http://localhost port = 1026 [THREAD] max_workers = 5 RUN docker build -t taurus . docker run taurus","title":"Instructions"},{"location":"usage.html","text":"Usages CREATION OF A NEW LISTENER ADD sequence diagram","title":"Usage"},{"location":"usage.html#usages","text":"","title":"Usages"},{"location":"usage.html#creation-of-a-new-listener","text":"ADD sequence diagram","title":"CREATION OF A NEW LISTENER"}]}